<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="BachelorsAndMastersManagement.Note.AddForm.WebHome" locale="">
  <web>BachelorsAndMastersManagement.Note.AddForm</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage></defaultLanguage>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1356998400000</creationDate>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1356998400000</date>
  <contentUpdateDate>1356998400000</contentUpdateDate>
  <version>1.1</version>
  <title>Adaugare nota</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{groovy}}
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.api.Context;
import com.xpn.xwiki.api.Object;
import com.xpn.xwiki.api.PropertyClass;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.objects.BaseObject;

/**
 * Used to preview class fields that have a custom display associated, before they are actually added/saved to the
 * class. For instance, when the user drags a Date field from the palette to the field canvas the class editor needs to
 * display that Date field as if the user would be editing an object with this Date field in "Inline form" edit mode.
 * This means that if the Date field has a custom display, the custom display should be used (e.g. using a Date picker).
 */
class PropertyCustomDisplayer
{
    private XWikiContext context;

    public PropertyCustomDisplayer(Context context)
    {
        this.context = context.getContext();
    }

    public String display(PropertyClass property, String prefix, com.xpn.xwiki.api.Object object)
    {
        HashMap&lt;String, Object&gt; backup = new HashMap&lt;String, Object&gt;();
        try {
            XWikiDocument.backupContext(backup, this.context);
            return this.displayInternal(property.getPropertyClass(), prefix, object.getXWikiObject());
        } finally {
            XWikiDocument.restoreContext(backup, this.context);
        }
    }

    private String displayInternal(com.xpn.xwiki.objects.classes.PropertyClass property, String prefix, BaseObject object)
    {
        StringBuffer result = new StringBuffer();
        property.displayCustom(result, property.getName(), prefix, "edit", object, this.context);
        return result.toString();
    }
}
xcontext.put('propertyCustomDisplayer', new PropertyCustomDisplayer(xcontext))
{{/groovy}}

{{velocity}}
{{html}}
#macro(displayPropertyEditInput $property $prefix $object)
  #set($wrappedProperty = $property.propertyClass)
  #if($wrappedProperty.isCustomDisplayed($xcontext.context))
    $xcontext.get('propertyCustomDisplayer').display($property, $prefix, $object)
  #else
    $doc.displayEdit($property, $prefix, $object)
  #end
#end

#set($className = "BachelorsAndMastersManagement.Note.Code.NotaClass")
#set($class = $xwiki.getDocument($className).xWikiClass)

#if("$!request.addnota_go" == "yes")
  #set($paginaNote = "BachelorsAndMastersManagement.Note.Code.NotaObjects")
  #set($noteDoc = $xwiki.getDocument($paginaNote))
  #set($obj = $noteDoc.newObject($className))
  #foreach($prop in $class.properties)
    #set($obj[$prop.name] = $request.get("addnota_${prop.name}"))
  #end
  #set($obj["profesor"] = $xcontext.user)
  Se adauga nota...
  $noteDoc.save()
  &lt;b&gt;OK&lt;/b&gt;
#end

&lt;form method="post"&gt;
&lt;input type="hidden" name="addnota_go" value="yes" /&gt;

#set($obj = $doc.newObject($class))
#foreach($prop in $class.properties)
  #if($prop.name != "profesor")
    &lt;dt&gt;${prop.prettyName}&lt;/dt&gt;
    &lt;dd&gt;
      #displayPropertyEditInput($prop "addnota_" $obj)
    &lt;/dd&gt;
  #end
#end

&lt;input type="submit" value="Adauga nota" class="button" /&gt;
&lt;/form&gt;
{{/html}}
{{/velocity}}</content>
</xwikidoc>
